#-----------------------------------------------------------------------------------------------------------------------
    source(db,hive...) ▶ kafca connect source (생산자) ▶ kafka cluster ▶ kafka connect sing(소비자)
#-----------------------------------------------------------------------------------------------------------------------
이 작업은 소스코딩 없이 환경만으로도 데이터를 이동할 수가 있다는 장점이 있다.
커넥터는 다양하게 존재한다.
#-----------------------------------------------------------------------------------------------------------------------
 이 작업을 위해서 사전에 마리아db에 mydb가 등록되어 있어야 된다.
 postman 도 준비한다.
 마리아 db에는 users 테이블이 존재해 된다.
 my_topic_users 의 토픽을 생성되어야 한다. - 이것은 my-source-connect 적용시 만들어 졌다.

 여기서 확인해야 되는 중요한 점은 sink는 테이블의 데이타를 이전해 주는 역할을 한다.
 my-topics-users라는 토픽에 이벤트가 발생하면 이 토팩에 해당되는 테이블을 자동으로 생성해 준다.
 여기서는 my-sink-connect를 생성하면 자동으로 my-topic-users가 생성된다는 말이다. ******
#-----------------------------------------------------------------------------------------------------------------------
[작업절차]
    □ kafka sync connect 추가 작업을 한다. in MariDB
    □ 이 작업은 PostMan을 통해서 실시한다.
        [소스]
            echo '
            {
                "name" : "my-sink-connect",
                    "config" : {
                    "connector.class" : "io.confluent.connect.jdbc.JdbcSourceConnector",
                    "connection.url":"jdbc:maridb://localhost:3306/mydb",
                    "connection.user":"root",
                    "connection.password":"test1357",
                    "auto.create":"true",
                    "auto.evolve":"true",
                    "delete.enabled":"false",
                    "tasks.max":"1",
                    "topics" : "my_topic_users"
                    }
            }
            ' | curl -X POST -d @- http://localhost:8083/connectors --header "content-Type:application/json"

            postman 등록시 전문타입은 json으로 한다.

    □ kafka 엔진
        connector : my_sink_connect 등록한다.
        [connector 등록결과]

        [connector 목록 확인]
            (GET) http://localhost:8083/connectors
                [
                    "my-sink-connect"
                ]

#-----------------------------------------------------------------------------------------------------------------------
[확인절차]
    □ 마리아 db
        MariaDB [(none)]> use mydb
        MariaDB [mydb]> show tables;
        MariaDB [mydb]> show tables;
        (my-sink-connect가 생성되면 topic 테이블이 생성된다.)
        +----------------+
        | Tables_in_mydb |
        +----------------+
        | my_topic_users | ******
        | orders         |
        | users          |
        +----------------+
        3 rows in set (0.001 sec)

        MariaDB [mydb]> select * from users;

    □ kafka connect 목록확인
      - curl http://localhost:8083/connectors/jq  (GET)
        이 명령어를 통해서 지금까지 등록된 내용들을 확인가능하다.

    □ kafka connect 확인
      - curl http://localhost:8083/connectors/my-sink-connect/status/jq
        나의 소스의 상태를 알고 싶을때
#-----------------------------------------------------------------------------------------------------------------------
[테스트절차]
    □ MariDB
      (단건입력)
      - insert into mydb.users(user_id, name) values('test2', 'TEST ADMIN');
      - select * from mydb.users;

    □ Kafka 생산자
      (감시)
      kafka는 MariaDB(mydb.users) 테이블의 변경사항을 감시하고 있다. (Running)

    □ kafka topic 생성 확인
        .\bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --list
        my_topic_users

        >>>>>>>>>>>>>
        my_sink_connect 는 users의 내용을  my_topic_users의 내용으로 이전한다.

    □ kafka 소비자
      C:\Work\kafka_2.12-3.7.1>.\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic my_topic_users --from-beginning

