#-----------------------------------------------------------------------------------------------------------------------
    source(db,hive...) ▶ kafca connect source (생산자) ▶ kafka cluster ▶ kafka connect sing(소비자)
#-----------------------------------------------------------------------------------------------------------------------
이 작업은 소스코딩 없이 환경만으로도 데이터를 이동할 수가 있다는 장점이 있다.
커넥터는 다양하게 존재한다.
#-----------------------------------------------------------------------------------------------------------------------
 이 작업을 위해서 사전에 마리아db에 mydb가 등록되어 있어야 된다.
 postman 도 준비한다.
 마리아 db에는 users 테이블이 존재해 된다.
 create table users(
     id int auto_increment primary key,
     user_id varchar(20),
     pwd varchar(20),
     name varchar(20),
     created_at datetime default NOW()
 );

#-----------------------------------------------------------------------------------------------------------------------
[작업절차]
    □ kafka sync connect 추가 작업을 한다. in MariDB
    □ 이 작업은 PostMan을 통해서 실시한다.
        [소스]
            echo '
            {
                "name":"my-source-connect",
                "config" : {
                "connector.class" : "io.confluent.connect.jdbc.JdbcSourceConnector",
                "connection.url":"jdbc:mysql://localhost:3306/mydb",
                "connection.user":"root",
                "connection.password":"test1357",
                "mode": "incrementing",
                "incrementing.column.name" : "id",
                "table.whitelist":"users",
                "topic.prefix" : "my_topic_",
                "tasks.max" : "1"
            }
            ' | curl -X POST -d @- http://localhost:8083/connectors --header "content-Type:application/json"

            postman 등록시 전문타입은 json으로 한다.

    □ kafka 엔진
        connector : my_source_connect 등록한다.
        [connector 등록결과]
            {
                "name":"my-source-connect",
                "config" : {
                "connector.class" : "io.confluent.connect.jdbc.JdbcSourceConnector",
                "connection.url":"jdbc:mysql://localhost:3306/mydb",
                "connection.user":"root",
                "connection.password":"test1357",
                "mode": "incrementing",
                "incrementing.column.name" : "id",
                "table.whitelist":"users",
                "topic.prefix" : "my_topic_",
                "tasks.max" : "1"
                },
                "tasks": [],
                "type": "source"
            }

        [connector 목록 확인]
            (GET) http://localhost:8083/connectors
                [
                    "my-source-connect"
                ]
        [topic 생성확인]
            - my-topic-users 생성
              .\bin\windows\kafka-topics.bat --create --topic my-topic-users --bootstrap-server localhost:9092 --partitions 1

            - 한건의 데이타 입력
              topic은 데이타가 변경되어야 생성된다. 먼저 마이리아 db에서 한건을 입력하자.
              insert into users(user_id,pwd,name) values('user1','test1111', 'name');
            - my-topic-users 소비
             .\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic my_topic_users --from-beginning
             .\bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --list
                my_topic_users

#-----------------------------------------------------------------------------------------------------------------------
[확인절차]
    □ 마리아 db
        MariaDB [(none)]> use mydb
        Database changed
        MariaDB [mydb]> show tables;
        +----------------+
        | Tables_in_mydb |
        +----------------+
        | orders         |
        | users          |
        +----------------+
        2 rows in set (0.010 sec)

        MariaDB [mydb]> select * from users2;
        Empty set (0.008 sec)

        MariaDB [mydb]> desc users2;
        +------------+-------------+------+-----+---------------------+----------------+
        | Field      | Type        | Null | Key | Default             | Extra          |
        +------------+-------------+------+-----+---------------------+----------------+
        | id         | int(11)     | NO   | PRI | NULL                | auto_increment |
        | user_id    | varchar(20) | YES  |     | NULL                |                |
        | pwd        | varchar(20) | YES  |     | NULL                |                |
        | name       | varchar(20) | YES  |     | NULL                |                |
        | created_at | datetime    | YES  |     | current_timestamp() |                |
        +------------+-------------+------+-----+---------------------+----------------+
        5 rows in set (0.015 sec)

        MariaDB [mydb]> insert into users(user_id,pwd,name) values('user1','test1111', 'name');
        Query OK, 1 row affected (0.008 sec)

    □ kafka connect 목록확인
      - curl http://localhost:8083/connectors/jq  (GET)
        이 명령어를 통해서 지금까지 등록된 내용들을 확인가능하다.
    □ kafka connect 확인
      - curl http://localhost:8083/connectors/my-source-connect/status/jq
        나의 소스의 상태를 알고 싶을때
#-----------------------------------------------------------------------------------------------------------------------
[테스트절차]
    □ MariDB
      (단건입력)
      - insert into mydb.users(user_id, name) values('test2', 'TEST ADMIN');
      - select * from mydb.users;
    □ Kafka 생산자
      (감시)
      kafka는 MariaDB(mydb.users) 테이블의 변경사항을 감시하고 있다. (Running)
    □ kafka topic 생성 확인
        .\bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --list
        my_topic_users
    □ kafka 소비자
      C:\Work\kafka_2.12-3.7.1>.\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic my_topic_users2 --from-beginning
      {"schema":{"type":"struct","fields":[{"type":"int32","optional":false,"field":"id"},{"type":"string","optional":true,"field":"user_id"},{"type":"string","optional":true,"field":"pwd"},{"type":"string","optional":true,"field":"name"},{"type":"int64","optional":true,"name":"org.apache.kafka.connect.data.Timestamp","version":1,"field":"created_at"}],"optional":false,"name":"users"},"payload":{"id":1,"user_id":"user1","pwd":"test1111","name":"name","created_at":1724072273000}}
      {"schema":{"type":"struct","fields":[{"type":"int32","optional":false,"field":"id"},{"type":"string","optional":true,"field":"user_id"},{"type":"string","optional":true,"field":"pwd"},{"type":"string","optional":true,"field":"name"},{"type":"int64","optional":true,"name":"org.apache.kafka.connect.data.Timestamp","version":1,"field":"created_at"}],"optional":false,"name":"users"},"payload":{"id":2,"user_id":"user1","pwd":"test1111","name":"name","created_at":1724073597000}}
